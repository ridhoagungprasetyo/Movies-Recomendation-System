# -*- coding: utf-8 -*-
"""System Recomendation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZCGH4laBWz5SMNt8OWoNJUWOKhGeNjK-

# Rekomendasi Movie
*oleh: Ridho Agung Prasetyo*

link kaggle : https://www.kaggle.com/datasets/sayan0211/movie-recomendation-pjct

# Mengimpor Library

Pada tahap ini, perlu kita mengimpor library yanng dibutuhkan untuk menyelesaikan proyek
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np

import re
import string

import matplotlib.pyplot as plt
# %matplotlib inline
import plotly.graph_objects as go
import plotly.express as px
from plotly.offline import init_notebook_mode, iplot
init_notebook_mode(connected=True)
import cufflinks as cf
cf.go_offline()
cf.set_config_file(offline=False, world_readable=True)
import plotly.io as pio
pio.renderers.default = 'colab'
from wordcloud import WordCloud,STOPWORDS

from collections import Counter

from sklearn.feature_extraction.text import CountVectorizer
from sklearn.metrics.pairwise import cosine_similarity

from scipy.sparse import csr_matrix
from sklearn.neighbors import NearestNeighbors

import tensorflow as tf
from tensorflow import keras
from keras import layers

"""# Data Loading

Melihat 5 baris pertama dari data dengan .head() dan ukuran dari data dengan .shape
"""

movies_data = pd.read_csv('movies.csv')
movies_data.head()

# Menampilkan jummlah baris dan kolom pada data
total_row, total_column = movies_data.shape
print(f"Total of rows: {total_row}")
print(f"Total of column: {total_column}")

"""Berikut adalah arti dari variabel-variabel pada data tersebut.

Variabel | Keterangan
----------|----------
movieId | ID movie
title | Judul movie
genres | Genre dari movie

Memeriksa Tipe Variabel beserta jumlahnya
"""

movies_data.info()

"""Dari hasil di atas, terdapat:
*   1 kolom bertipe interger
*   2 kolom bertipe object

Selain itu juga terlihat tidak ada kolom yang mempunyai nilai null. hal ini bisa dibuktikan nanti saat masuk proses Data Cleaning.

"""

movies_data.describe()

"""Dari Hasil diatas beberapa yang bisa disimpukan:

1.   Distribusi Tidak Merata: Data movieId memiliki rentang nilai yang sangat luas (dari 1 hingga 193.609) dengan banyak nilai yang terkonsentrasi di bagian bawah distribusi (berdasarkan Q1 dan median yang kecil dibandingkan Q3 dan max).

2.   Kemungkinan Data Skewed: Dengan nilai rata-rata lebih besar dari median, distribusi data kemungkinan memiliki kemiringan positif (skewed to the right).


3.   Tidak Representatif untuk Analisis Kuantitatif: Karena movieId hanyalah identifier, analisis ini lebih memberikan wawasan tentang cakupan dataset (berapa banyak film yang ada dan bagaimana data ini tersebar).
"""

print('Jumlah data genre: ', len(movies_data.genres.unique()))

"""Melihat jumlah Genre terdapat 951 data

# Data Cleaning
"""

# Menghitung jumlah data kosong pada setiap kolom
movies_data.isnull().sum()

"""Terlihat bahwa tidak terdapat kolom dengan nilai kosong

## Memeriksa Data Duplikat
"""

movies_data.duplicated().sum()

"""Terlihat tidak ada duplikat data

# Exploratory Data Analysis (EDA)

## Memuat Dataset ke dalam variabel baru
"""

# Memuat dataset ke dalam variable baru
movie = movies_data.movieId.unique()

# Mengurutkan data dan menghapus data yang sama
movie = np.sort(np.unique(movie))

print('Jumlah seluruh data movie berdasarkan movieId: ', len(movie))

movie_info = pd.concat([movies_data])

movie_info

# Melihat beberapa contoh genre
print(movies_data['genres'].head(10))

# Menghitung jumlah genre unik
genre_counts = movies_data['genres'].value_counts()
print("\nJumlah setiap genre:\n", genre_counts)

# 1. Genre paling populer
print("\nGenre paling populer:", genre_counts.index[0])

# 2. Genre yang paling jarang
print("\nGenre paling jarang:", genre_counts.index[-1])

# 3.  Membuat wordcloud untuk visualisasi genre
text = ' '.join(movies_data['genres'])
wordcloud = WordCloud(width=800, height=400, background_color='white').generate(text)
plt.figure(figsize=(10, 5))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis('off')
plt.title('Wordcloud Genre Film')
plt.show()

# 4. Eksplorasi genre kombinasi
genre_combinations = movies_data['genres'].str.split('|').explode()
genre_combination_counts = genre_combinations.value_counts()

print("Genre Combinations and their counts:\n", genre_combination_counts)

# Visualisasi genre kombinasi (contoh menggunakan bar chart)
plt.figure(figsize=(12, 6))
genre_combination_counts.head(20).plot(kind='bar')  # Menampilkan 20 genre kombinasi teratas
plt.title('Top 20 Genre Combinations')
plt.xlabel('Genre Combination')
plt.ylabel('Count')
plt.xticks(rotation=45, ha='right')
plt.show()

"""Analisis Distribusi kolom numerikal dengan histogram"""

# menganalisis distribusi kolom numerik (movieId)
plt.figure(figsize=(10, 6))
plt.hist(movies_data['movieId'], bins=30, edgecolor='black')  # bins menyesuaikan jumlah kelompok
plt.xlabel('Movie ID')
plt.ylabel('Frequency')
plt.title('Distribution of Movie IDs')
plt.show()

"""## Memilih kolom berdasarkan data yang dibutuhkan untuk  melakukan content based learning berdasarkan genre"""

judul_movie = movies_data['title'].tolist()
genre_movie = movies_data['genres'].tolist()

print(len(judul_movie))
print(len(genre_movie))

"""Membuat data menjadi dalam bentuk dataframe sehingga mudah untuk dipersiapkan"""

data = pd.DataFrame({
    'judul': judul_movie,
    'genre': genre_movie
})

data

# Memuat banyak data dari setiap uniqe value berdasarkan genre
value_genre = pd.DataFrame(data['genre'].value_counts().reset_index().values, columns = ['genre', 'count'])
print(len(value_genre))
pd.options.display.max_colwidth = 500
value_genre

data.genre.unique()

data.reset_index()
data

# Memasukkan nilai data masing masing kolom kedalam variabel baru
judul = data['judul'].tolist()
genre = data['genre'].tolist()

print(len(judul))
print(len(genre))

# mengecek ulang data yg dimasukkan ke dalam variable baru
data = pd.DataFrame({
    'judul': judul,
    'genre': genre
})
data

"""Membangun sistem rekomendasi berdasarkan genre"""

# Inisialisasi CountVectorizer
tf = CountVectorizer()

# Melakukan perhitungan idf pada data genre
tf.fit(genre)

# Mapping array dari fitur index integer ke fitur nama
tf.get_feature_names_out()

# Melakukan fit lalu ditransformasikan ke bentuk matrix
tfidf_matrix = tf.fit_transform(genre)

# Melihat ukuran matrix tfidf
tfidf_matrix.shape

# Mengubah vektor tf-idf dalam bentuk matriks dengan fungsi todense()
tfidf_matrix.todense()

"""Melihat daftar jumlah film berdasarkan genre dan melihat korelasi yang diperliahtkan dalam bentuk matrix"""

pd.DataFrame(
    tfidf_matrix.todense(),
    columns=tf.get_feature_names_out(),
    index=data.judul
).sample(22, axis=1).sample(10, axis=0)

"""# Modeling

melatih model dengan cosine similarity
"""

# Menghitung cosine similarity pada matrix tf-idf
cosine_sim = cosine_similarity(tfidf_matrix)
cosine_sim

"""Menampilkan matriks kesamaan setiap judul dengan menampilkan judul film dalam 10 sampel kolom (axis = 1) dan 10 sampel baris (axis = 0)."""

cosine_sim_df = pd.DataFrame(cosine_sim, index=data['judul'], columns=genre)
print('Shape:', cosine_sim_df.shape)


cosine_sim_df.sample(10, axis=1).sample(10, axis=0)

"""# Evaluasi Model"""

indices = pd.Series(index = data['judul'], data = data.index).drop_duplicates()
indices.head()

"""Membuat fungsi untuk memanggil 10 rekomendasi film berdasarkan judul yang di input"""

def movie_recommendations(judul, cosine_sim = cosine_sim,items=data[['judul','genre']]):
    # Mengambil indeks dari judul film yang telah didefinisikan sebelumnnya
    idx = indices[judul]

    # Mengambil skor kemiripan dengan semua judul film
    sim_scores = list(enumerate(cosine_sim[idx]))

    # Mengurutkan film berdasarkan skor kemiripan
    sim_scores = sorted(sim_scores, key = lambda x : x[1], reverse = True)

    # Mengambil 10 skor kemiripan dari 1-11 karena urutan 0 memberikan indeks yang sama dengan judul film yang diinput
    sim_scores = sim_scores[1:11]

    # Mengambil judul film dari skor kemiripan
    movie_indices = [i[0] for i in sim_scores]

    # Mengembalikan 20 rekomendasi judul film dari kemiripan skor yang telah diurutkan dan menampilkan genre dari 20 rekomendasi film tersebut
    return pd.DataFrame(data['judul'][movie_indices]).merge(items)

# mengecek judul film di dalam data
data[data.judul.eq('Jeffrey (1995)')]

"""Mencoba menampilkan 10 rekomendasi film dari judul yang telah diinput menggunakan fungsi movie_recomendations"""

recomendation = pd.DataFrame(movie_recommendations('Jeffrey (1995)'))
recomendation

# menghitung banyaknya data genre pada hasil rekomendasi yg dilakukan
value = pd.DataFrame(recomendation['genre'].value_counts().reset_index().values, columns = ['genre', 'count'])
value.head()

"""Melakukan perhitungan dengan menggunakan metrik precision untuk melihat akurassi"""

TP = 9 #jumlah prediksi benar untuk genre yang mirip atau serupa
FP = 0 #jumlah prediksi salah untuk genre yang mirip atau serupa

Precision = TP/(TP+FP)
print("{0:.0%}".format(Precision))